#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

/*

   &mmv_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

   &msc_input_listener {
       input-processors = <&zip_xy_scaler 2 1>;
   };

 */

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        Hold_tap: Hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAP";
            bindings = <&kp>, <&none>;

            #binding-cells = <2>;
            tapping-term-ms = <300>;
            flavor = "tap-preferred";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        layer_combo {
            bindings = <&mo 0>;
            key-positions = <42 47>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Layer_0 {
            display-name = "QWERTY";
            bindings = <
&kp ESCAPE        &mt LS(Q) Q  &mt LS(W) W  &mt LS(E) E  &mt LS(R) R    &mt LS(T) T                          &kp UP                 &mt LS(Y) Y   &mt LS(U) U  &mt LS(I) I          &mt LS(O) O              &mt LS(P) P            &mt KP_MINUS UNDERSCORE
&kp TAB           &mt LS(A) A  &mt LS(S) S  &mt LS(D) D  &mt LS(F) F    &mt LS(G) G                &kp LEFT  &kp C_MUTE  &kp RIGHT  &mt LS(H) H   &mt LS(J) J  &mt LS(K) K          &mt LS(L) L              &mt COLON SEMICOLON    &mt DOUBLE_QUOTES SINGLE_QUOTE
&kp LEFT_COMMAND  &mt LS(Z) Z  &mt LS(X) X  &mt LS(C) C  &mt LS(V) V    &mt LS(B) B       &none              &kp DOWN               &mt LS(N) N   &mt LS(M) M  &mt LESS_THAN COMMA  &mt GREATER_THAN PERIOD  &mt QUESTION KP_SLASH  &mt KP_PLUS KP_EQUAL
                                            &mo 1        &kp BACKSPACE  &kp LEFT_CONTROL                                            &kp KP_ENTER  &kp SPACE    &mo 2
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        layer_1 {
            bindings = <
&mt TILDE GRAVE  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT                    &trans          &kp CARET                    &kp AMPERSAND                  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&trans           &kp N1           &kp N2       &kp N3    &kp N4      &kp N5                 &trans  &trans  &trans  &kp N6                       &kp N7                         &kp N8        &kp N9                &kp N0                 &kp BACKSLASH
&trans           &none            &trans       &trans    &trans      &trans       &trans            &trans          &mt LEFT_BRACE LEFT_BRACKET  &mt RIGHT_BRACKET RIGHT_BRACE  &trans        &trans                &trans                 &trans
                                               &trans    &trans      &trans                                         &trans                       &trans                         &trans
            >;
        };

        layer_2 {
            display-name = "NUMBER";
            bindings = <
&none  &none      &kp LG(W)  &none      &none      &kp LG(LS(T))                                &mmv MOVE_UP                     &none         &kp UP_ARROW   &none         &none          &none  &bt BT_CLR
&none  &kp LG(A)  &kp LG(S)  &none      &kp LG(F)  &none                        &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp LEFT      &kp DOWN       &kp RIGHT     &none          &none  &bt BT_NXT
&none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &none          &kp C_MUTE                    &mmv MOVE_DOWN                   &bt BT_SEL 0  &bt BT_DISC 0  &bt BT_SEL 1  &bt BT_DISC 1  &none  &bt BT_CLR_ALL
                             &trans     &trans     &trans                                                                        &none         &none          &trans
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };
};
